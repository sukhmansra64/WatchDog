{"ast":null,"code":"var _jsxFileName = \"/Users/sukhmansra/Desktop/vaccine_hunter_fullstack/client/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { geolocated } from \"react-geolocated\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [longitude, setLongitude] = useState(null);\n  const [latitude, setLatitude] = useState(null);\n  const [alert, setAlert] = useState('');\n  const [isAlert, setIsAlert] = useState(false);\n  const auth = localStorage.getItem('token');\n  let history = useHistory();\n  useEffect(() => {\n    if (!auth) {\n      history.push('/login');\n    }\n\n    axios.get('/api/auth', {\n      headers: {\n        token: auth\n      }\n    }).then(data => {\n      const response = data;\n      console.log(response);\n    }).catch(err => {\n      console.error(err.response.data.msg);\n      history.push('/login');\n    });\n    getLocation();\n  }, [auth, history]);\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setAlert('Geolocation is not supported by your browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n        console.log(position.coords.latitude, position.coords.longitude);\n      }, () => {\n        setIsAlert(true);\n        setAlert('Unable to retrieve your location');\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Logged in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Dashboard, \"+Bh52LMd2J28YPuGImrxD8KODFc=\", false, function () {\n  return [useHistory];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/sukhmansra/Desktop/vaccine_hunter_fullstack/client/src/components/Dashboard.js"],"names":["useEffect","useState","axios","useHistory","geolocated","Dashboard","longitude","setLongitude","latitude","setLatitude","alert","setAlert","isAlert","setIsAlert","auth","localStorage","getItem","history","push","get","headers","token","then","data","response","console","log","catch","err","error","msg","getLocation","navigator","geolocation","getCurrentPosition","position","coords"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;;AAEA,MAAMC,SAAS,GAAG,MAAK;AAAA;;AACnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,OAAD,EAASC,UAAT,IAAuBZ,QAAQ,CAAC,KAAD,CAArC;AACA,QAAMa,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAb;AACA,MAAIC,OAAO,GAAGd,UAAU,EAAxB;AACAH,EAAAA,SAAS,CAAC,MAAI;AACV,QAAG,CAACc,IAAJ,EAAS;AACLG,MAAAA,OAAO,CAACC,IAAR,CAAa,QAAb;AACH;;AACDhB,IAAAA,KAAK,CAACiB,GAAN,CAAU,WAAV,EAAsB;AAACC,MAAAA,OAAO,EAAC;AAACC,QAAAA,KAAK,EAAEP;AAAR;AAAT,KAAtB,EACKQ,IADL,CACWC,IAAD,IAAQ;AACV,YAAMC,QAAQ,GAAGD,IAAjB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACH,KAJL,EAIOG,KAJP,CAIcC,GAAD,IAAO;AAChBH,MAAAA,OAAO,CAACI,KAAR,CAAcD,GAAG,CAACJ,QAAJ,CAAaD,IAAb,CAAkBO,GAAhC;AACAb,MAAAA,OAAO,CAACC,IAAR,CAAa,QAAb;AACH,KAPD;AAQAa,IAAAA,WAAW;AACd,GAbQ,EAaP,CAACjB,IAAD,EAAMG,OAAN,CAbO,CAAT;;AAeA,QAAMc,WAAW,GAAG,MAAM;AACtB,QAAI,CAACC,SAAS,CAACC,WAAf,EAA4B;AACxBtB,MAAAA,QAAQ,CAAC,8CAAD,CAAR;AACH,KAFD,MAEO;AACHqB,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACnD1B,QAAAA,WAAW,CAAC0B,QAAQ,CAACC,MAAT,CAAgB5B,QAAjB,CAAX;AACAD,QAAAA,YAAY,CAAC4B,QAAQ,CAACC,MAAT,CAAgB9B,SAAjB,CAAZ;AACAmB,QAAAA,OAAO,CAACC,GAAR,CAAYS,QAAQ,CAACC,MAAT,CAAgB5B,QAA5B,EAAsC2B,QAAQ,CAACC,MAAT,CAAgB9B,SAAtD;AACH,OAJD,EAIG,MAAM;AACLO,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,QAAAA,QAAQ,CAAC,kCAAD,CAAR;AACH,OAPD;AAQH;AACJ,GAbD;;AAeA,sBACI;AAAA,2BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAKH,CA1CD;;GAAMN,S;UAMYF,U;;;KANZE,S;AA4CN,eAAeA,SAAf","sourcesContent":["import {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {useHistory} from \"react-router-dom\";\nimport { geolocated } from \"react-geolocated\";\n\nconst Dashboard = () =>{\n    const [longitude, setLongitude] = useState(null);\n    const [latitude, setLatitude] = useState(null);\n    const [alert, setAlert] = useState('');\n    const [isAlert,setIsAlert] = useState(false);\n    const auth = localStorage.getItem('token');\n    let history = useHistory();\n    useEffect(()=>{\n        if(!auth){\n            history.push('/login');\n        }\n        axios.get('/api/auth',{headers:{token: auth}})\n            .then((data)=>{\n                const response = data;\n                console.log(response);\n            }).catch((err)=>{\n            console.error(err.response.data.msg)\n            history.push('/login');\n        });\n        getLocation();\n    },[auth,history]);\n\n    const getLocation = () => {\n        if (!navigator.geolocation) {\n            setAlert('Geolocation is not supported by your browser');\n        } else {\n            navigator.geolocation.getCurrentPosition((position) => {\n                setLatitude(position.coords.latitude);\n                setLongitude(position.coords.longitude);\n                console.log(position.coords.latitude, position.coords.longitude)\n            }, () => {\n                setIsAlert(true);\n                setAlert('Unable to retrieve your location');\n            });\n        }\n    }\n\n    return(\n        <>\n            <h1>Logged in</h1>\n        </>\n    )\n}\n\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}