{"ast":null,"code":"var _jsxFileName = \"/Users/sukhmansra/Desktop/vaccine_hunter_fullstack/client/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { Alert } from \"react-bootstrap\";\nimport GoogleMapReact from 'google-map-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [longitude, setLongitude] = useState(null);\n  const [latitude, setLatitude] = useState(null);\n  const [alert, setAlert] = useState('');\n  const [isAlert, setIsAlert] = useState(false);\n  const auth = localStorage.getItem('token');\n  let history = useHistory();\n  let defaultProps = {};\n  useEffect(() => {\n    if (!auth) {\n      history.push('/login');\n    }\n\n    axios.get('/api/auth', {\n      headers: {\n        token: auth\n      }\n    }).then(data => {\n      const response = data;\n      console.log(response);\n    }).catch(err => {\n      console.error(err.response.data.msg);\n      history.push('/login');\n    });\n  }, [auth, history, defaultProps]);\n\n  const getLocation = props => {\n    if (!navigator.geolocation) {\n      setAlert('Geolocation is not supported by your browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n        props.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      }, () => {\n        setIsAlert(true);\n        setAlert('Unable to retrieve your location');\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isAlert && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: alert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100vh',\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n        bootstrapURLKeys: {\n          key: \"AIzaSyCOhH66mvu-ZomI7nBbb-_U4gZOU3Ow8ik\"\n        },\n        defaultCenter: defaultProps.center,\n        defaultZoom: 11\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Dashboard, \"+Bh52LMd2J28YPuGImrxD8KODFc=\", false, function () {\n  return [useHistory];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/sukhmansra/Desktop/vaccine_hunter_fullstack/client/src/components/Dashboard.js"],"names":["useEffect","useState","axios","useHistory","Alert","GoogleMapReact","Dashboard","longitude","setLongitude","latitude","setLatitude","alert","setAlert","isAlert","setIsAlert","auth","localStorage","getItem","history","defaultProps","push","get","headers","token","then","data","response","console","log","catch","err","error","msg","getLocation","props","navigator","geolocation","getCurrentPosition","position","coords","center","lat","lng","height","width","key"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {useHistory} from \"react-router-dom\";\nimport {Alert} from \"react-bootstrap\";\nimport GoogleMapReact from 'google-map-react';\n\nconst Dashboard = () =>{\n    const [longitude, setLongitude] = useState(null);\n    const [latitude, setLatitude] = useState(null);\n    const [alert, setAlert] = useState('');\n    const [isAlert,setIsAlert] = useState(false);\n    const auth = localStorage.getItem('token');\n    let history = useHistory();\n    let defaultProps = {};\n    useEffect(()=>{\n        if(!auth){\n            history.push('/login');\n        }\n        axios.get('/api/auth',{headers:{token: auth}})\n            .then((data)=>{\n                const response = data;\n                console.log(response);\n            }).catch((err)=>{\n            console.error(err.response.data.msg)\n            history.push('/login');\n        });\n    },[auth,history,defaultProps]);\n\n    const getLocation = (props) => {\n        if (!navigator.geolocation) {\n            setAlert('Geolocation is not supported by your browser');\n        } else {\n            navigator.geolocation.getCurrentPosition((position) => {\n                setLatitude(position.coords.latitude);\n                setLongitude(position.coords.longitude);\n                props.center = {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                }\n            }, () => {\n                setIsAlert(true);\n                setAlert('Unable to retrieve your location');\n            });\n        }\n    }\n\n    return(\n        <>\n            {isAlert &&<Alert variant='danger'>{alert}</Alert>}\n            <div style={{ height: '100vh', width: '100%' }}>\n                <GoogleMapReact\n                    bootstrapURLKeys={{ key: \"AIzaSyCOhH66mvu-ZomI7nBbb-_U4gZOU3Ow8ik\" }}\n                    defaultCenter={defaultProps.center}\n                    defaultZoom={11}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}